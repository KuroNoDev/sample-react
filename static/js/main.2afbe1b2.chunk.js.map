{"version":3,"sources":["assets/images/comments.svg","assets/images/logo.svg","actions/albums.ts","types/actions.ts","components/Albums.tsx","actions/posts.ts","components/Post.tsx","components/Posts.tsx","App.tsx","serviceWorker.ts","reducers/albums.ts","reducers/postsLimit.ts","reducers/posts.ts","store/configureStore.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","setAlbums","albums","type","setAlbumsPagination","pagination","updateAlbum","album","dispatch","getState","map","_album","id","getAlbums","startPage","albumsPagination","Promise","resolve","axios","get","concat","then","res","Object","toConsumableArray","data","Albums","albumsElement","createRef","requests","unmounted","state","showModal","isLoading","carouselAlbum","title","photos","carouselItems","_this2","this","window","addEventListener","handleScroll","bind","props","length","getPhotos","photo","react_default","a","createElement","key","src","url","alt","_this3","forEach","undefined","setState","getCarouselItems","innerHeight","scrollY","document","body","offsetHeight","lazyLoadAlbums","setTimeout","_this4","className","ref","onClick","onAlbumClick","slice","thumbnailUrl","logo","width","height","index_es","open","onClose","onAlbumClose","classNames","overlay","modal","center","lib","showArrows","infiniteLoop","centerMode","emulateTouch","Component","connect","bindActionCreators","setPosts","posts","setLimit","limit","updatePost","post","_post","getPosts","Post","commentsLoaded","comments","_this","match","params","postLoaded","userId","updatedPost","visited","comment","email","name","postTpl","commentsTpl","Posts","filteredPosts","filterPosts","existingPosts","filter","filteredPost","push","event","parseInt","currentTarget","value","option","react_router_dom","to","onChange","onSelectChange","optionTpl","App","basename","process","exact","activeClassName","react_router","path","component","Boolean","location","hostname","defaultAlbumsState","defaultPaginationState","defaultState","rootReducer","combineReducers","arguments","action","store","createStore","applyMiddleware","thunk","render","es","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2afbe1b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/comments.435b7f38.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk';\r\nimport { AppState } from '../store/configureStore';\r\nimport { AppActions, SET_ALBUMS, SET_ALBUMS_PAGINATION } from '../types/actions';\r\nimport Album from '../types/Album';\r\nimport Pagination from '../types/Pagination';\r\n\r\nexport const setAlbums = (albums: Album[]): AppActions => ({\r\n  type: SET_ALBUMS,\r\n  albums\r\n});\r\n\r\nexport const setAlbumsPagination = (pagination: Pagination): AppActions => ({\r\n  type: SET_ALBUMS_PAGINATION,\r\n  pagination\r\n});\r\n\r\nexport const updateAlbum = (album: Album) => {\r\n  return (dispatch: Dispatch<AppActions>, getState: () => AppState) => {\r\n    const albums = getState().albums.map((_album: Album) => {\r\n      return album.id === _album.id ? album : _album;\r\n    });\r\n\r\n    dispatch(setAlbums(albums));\r\n  };\r\n};\r\n\r\nexport const getAlbums = ():ThunkAction<Promise<void>, AppState, {}, any> => {\r\n  return (dispatch: ThunkDispatch<{}, {}, AppActions>, getState: () => AppState): Promise<void> => {\r\n    const albums = getState().albums;\r\n    const startPage = getState().albumsPagination.startPage;\r\n\r\n    return new Promise<void>((resolve) => {\r\n      axios.get(`https://jsonplaceholder.typicode.com/albums?_limit=18&_start=${startPage}`)\r\n        .then(res => {\r\n          dispatch(setAlbums([...albums, ...res.data]));\r\n          resolve();\r\n        });\r\n    })\r\n  };\r\n};","import Album from '../types/Album';\r\nimport Post from '../types/Post';\r\nimport Pagination from '../types/Pagination';\r\n\r\nexport const SET_POSTS = 'SET_POSTS';\r\nexport const SET_LIMIT = 'SET_LIMIT';\r\nexport const UPDATE_POST = 'UPDATE_POST';\r\n\r\nexport const SET_ALBUMS = 'SET_ALBUMS';\r\nexport const SET_ALBUMS_PAGINATION = 'SET_ALBUMS_PAGINATION';\r\n\r\nexport interface SetPostsAction {\r\n  type: typeof SET_POSTS;\r\n  posts: Post[];\r\n}\r\n\r\nexport interface SetLimitAction {\r\n  type: typeof SET_LIMIT;\r\n  limit: number;\r\n}\r\n\r\nexport interface SetAlbumsAction {\r\n  type: typeof SET_ALBUMS;\r\n  albums: Album[];\r\n}\r\n\r\nexport interface SetAlbumsPagination {\r\n  type: typeof SET_ALBUMS_PAGINATION;\r\n  pagination: Pagination;\r\n}\r\n\r\nexport type PostsActionTypes = SetPostsAction | SetLimitAction;\r\nexport type AlbumsActionTypes = SetAlbumsAction | SetAlbumsPagination;\r\nexport type AppActions = PostsActionTypes | AlbumsActionTypes;","import axios from 'axios';\r\nimport React, { Component, createRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Carousel } from 'react-responsive-carousel';\r\nimport Modal from 'react-responsive-modal';\r\nimport { bindActionCreators } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { getAlbums, setAlbumsPagination, updateAlbum } from '../actions/albums';\r\nimport logo from '../assets/images/logo.svg';\r\nimport '../scss/Albums.scss';\r\nimport { AppState } from '../store/configureStore';\r\nimport { AppActions } from '../types/actions';\r\nimport { default as AlbumType } from '../types/Album';\r\nimport Pagination from '../types/Pagination';\r\nimport Photo from '../types/Photo';\r\n\r\ntype AlbumsProps = LinkStateProps & LinkDispatchProps;\r\n\r\nclass Albums extends Component<AlbumsProps> {\r\n  albumsElement = createRef<HTMLDivElement>();\r\n  requests = 0;\r\n  unmounted = false;\r\n  state = {\r\n    showModal: false,\r\n    isLoading: false,\r\n    carouselAlbum: {\r\n      id: 0,\r\n      title: '',\r\n      photos: []\r\n    },\r\n    carouselItems: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', this.handleScroll.bind(this));\r\n    if (this.props.albums.length === 0) {\r\n      this.props.getAlbums().then(() => {\r\n        this.getPhotos();\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    this.unmounted = true;\r\n  }\r\n\r\n  getCarouselItems (album: AlbumType) {\r\n    return (\r\n      album.photos\r\n        ? album.photos.map((photo:Photo) => <img key={photo.id} src={photo.url} alt=\"\"/>)\r\n        : ''\r\n    )\r\n  }\r\n\r\n  getPhotos () {\r\n    this.props.albums.forEach((album) => {\r\n      if (album.photos === undefined) {\r\n        this.requests = this.requests + 1;\r\n        axios.get(`https://jsonplaceholder.typicode.com/photos?albumId=${album.id}&_limit=6`)\r\n          .then(res => {\r\n            if (this.unmounted) return;\r\n            album.photos = res.data;\r\n            this.props.updateAlbum(album);\r\n            if (this.state.carouselAlbum.id === album.id) this.setState({carouselItems: this.getCarouselItems(album)});\r\n            this.requests = this.requests - 1;\r\n          });\r\n      }\r\n    })\r\n  }\r\n\r\n  handleScroll () {\r\n    if (this.state.isLoading !== true && (window.innerHeight + window.scrollY) >= document.body.offsetHeight) {\r\n      this.lazyLoadAlbums();\r\n    }\r\n  }\r\n\r\n  async lazyLoadAlbums () {\r\n    const albumsPagination = this.props.albumsPagination;\r\n    if (this.requests > 0 || albumsPagination.startPage > 100 || this.unmounted) return;\r\n\r\n    this.setState({isLoading: true});\r\n    albumsPagination.startPage += 18;\r\n\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    await this.props.setAlbumsPagination(albumsPagination);\r\n    await this.props.getAlbums();\r\n    this.getPhotos();\r\n\r\n    this.setState({isLoading: false});\r\n  }\r\n\r\n  onAlbumClick (album: AlbumType) {\r\n    this.setState({\r\n      carouselAlbum: album,\r\n      carouselItems: this.getCarouselItems(album),\r\n      showModal: true\r\n    });\r\n  }\r\n\r\n  onAlbumClose () {\r\n    this.setState({showModal: false});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Albums</h2>\r\n        <div className=\"d-flex justify-content-between flex-wrap\" ref={this.albumsElement}>\r\n          { \r\n            this.props.albums.length > 0 ? this.props.albums.map((album) => {\r\n              return (\r\n                <div key={album.id} className=\"album mb-3 w-25 card\">\r\n                  <div onClick={this.onAlbumClick.bind(this, album)}>\r\n                    <div className=\"d-flex flex-column justify-content-around card-body\">\r\n                      <div className=\"thumbnails d-flex justify-content-between\">\r\n                        {\r\n                          album.photos !== undefined ?\r\n                          album.photos.slice(0, 3).map((photo: Photo) => {\r\n                            return (\r\n                              <div key={photo.id} className=\"thumbnail\">\r\n                                <img className=\"rounded\" src={photo.thumbnailUrl} alt=\"\"/>\r\n                              </div>\r\n                            )\r\n                          }) :\r\n                          <div className=\"w-100 text-center\">\r\n                            <img src={logo} width=\"100\" height=\"100\" className=\"app-logo\" alt=\"\"></img>\r\n                          </div>\r\n                        }\r\n                      </div>\r\n                      <h4 className=\"text-center mt-3\">\r\n                        {album.title}\r\n                      </h4>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )\r\n            }) : ''\r\n          }\r\n        </div>\r\n        {\r\n          this.state.isLoading === true ?\r\n          <div className=\"w-100 text-center\">\r\n            <img src={logo} width=\"100\" height=\"100\" className=\"app-logo\" alt=\"\"></img>\r\n          </div> : ''\r\n        }\r\n        <Modal open={this.state.showModal} onClose={this.onAlbumClose.bind(this)} classNames={{\r\n          overlay: 'modal-overlay',\r\n          modal: 'modal-body',\r\n        }} center>\r\n          <h2 className=\"mb-4\">{this.state.carouselAlbum.title}</h2>\r\n          {\r\n            this.state.showModal && this.state.carouselItems.length > 0 ?\r\n            <Carousel showArrows={true} infiniteLoop={true} centerMode={true} emulateTouch={true}>\r\n              {this.state.carouselItems}\r\n            </Carousel> :\r\n            <div className=\"w-100 text-center\">\r\n              <img src={logo} width=\"100\" height=\"100\" className=\"app-logo\" alt=\"\"></img>\r\n            </div>\r\n          }\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface LinkStateProps {\r\n  albums: AlbumType[];\r\n  albumsPagination: Pagination;\r\n}\r\n\r\ninterface LinkDispatchProps {\r\n  getAlbums: () => any;\r\n  updateAlbum: (album: AlbumType) => void;\r\n  setAlbumsPagination: (pagination: Pagination) => void;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): LinkStateProps => ({\r\n  albums: state.albums,\r\n  albumsPagination: state.albumsPagination\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, AppActions>): LinkDispatchProps => ({\r\n  getAlbums: bindActionCreators(getAlbums, dispatch),\r\n  updateAlbum: bindActionCreators(updateAlbum, dispatch),\r\n  setAlbumsPagination: bindActionCreators(setAlbumsPagination, dispatch)\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Albums);","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk';\r\nimport { AppState } from '../store/configureStore';\r\nimport { AppActions, SET_LIMIT, SET_POSTS } from '../types/actions';\r\nimport Post from '../types/Post';\r\n\r\nexport const setPosts = (posts: Post[]): AppActions => ({\r\n  type: SET_POSTS,\r\n  posts\r\n});\r\n\r\nexport const setLimit = (limit: number): AppActions => ({\r\n  type: SET_LIMIT,\r\n  limit\r\n});\r\n\r\nexport const updatePost = (post: Post) => {\r\n  return (dispatch: Dispatch<AppActions>, getState: () => AppState) => {\r\n    const posts = getState().posts.map((_post: Post) => {\r\n      return post.id === _post.id ? post : _post;\r\n    });\r\n\r\n    dispatch(setPosts(posts));\r\n  };\r\n};\r\n\r\nexport const getPosts = ():ThunkAction<Promise<void>, {}, {}, any> => {\r\n  return (dispatch: ThunkDispatch<{}, {}, AppActions>): Promise<void> => {\r\n    return new Promise<void>((resolve) => {\r\n      axios.get(`https://jsonplaceholder.typicode.com/posts`)\r\n        .then(res => {\r\n          dispatch(setPosts(res.data));\r\n          resolve();\r\n        });\r\n    })\r\n  };\r\n};","import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { bindActionCreators } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { updatePost } from '../actions/posts';\r\nimport logo from '../assets/images/logo.svg';\r\nimport { AppActions } from '../types/actions';\r\nimport Comment from '../types/Comment';\r\nimport { default as PostType } from '../types/Post';\r\n\r\ntype PostProps = RouteComponentProps<{id: 'string'}> & LinkDispatchProps;\r\n\r\nclass Post extends Component<PostProps> {\r\n  state = {\r\n    commentsLoaded: false,\r\n    comments: [],\r\n    id: this.props.match.params.id,\r\n    postLoaded: false,\r\n    post: {\r\n      userId: 0,\r\n      id: 0,\r\n      title: 'test',\r\n      body: 'test'\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const post = await axios.get(`https://jsonplaceholder.typicode.com/posts/${this.state.id}`);\r\n    this.setState({\r\n      postLoaded: true,\r\n      post: post.data\r\n    });\r\n    \r\n    const comments = await axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${this.state.id}`)\r\n    this.setState({\r\n      commentsLoaded: true,\r\n      comments: comments.data\r\n    });\r\n\r\n    const updatedPost = {...post.data, ...{visited: true, comments: comments.data.length}}\r\n    this.props.updatePost(updatedPost);\r\n  }\r\n\r\n  commentsTpl () {\r\n    if (this.state.commentsLoaded) {\r\n      return (\r\n        <div>\r\n          <h2>\r\n            Comments\r\n          </h2>\r\n          <div className=\"card\">\r\n            {this.state.comments.map((comment:Comment) => {\r\n              return (\r\n                <div key={comment.id} className=\"d-flex flex-column flex-sm-row px-3 pt-3\">\r\n                  <div className=\"text-center mb-2 mb-sm-0\">\r\n                    <img className=\"rounded-circle\" src={`https://api.adorable.io/avatars/50/${comment.email}.png`} alt={`user-${comment.email}`}/>\r\n                  </div>\r\n                  <div className=\"flex-grow-1 pl-0 pl-sm-3\">\r\n                    <h4 className=\"mb-0\">{comment.name}</h4>\r\n                    <h5 className=\"text-muted\">{comment.email}</h5>\r\n                    <p>{comment.body}</p>\r\n                  </div>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <img src={logo} width=\"100\" height=\"100\" className=\"app-logo\" alt=\"\"></img>\r\n      );\r\n    }\r\n  }\r\n\r\n  postTpl() {\r\n    const post = this.state.post;\r\n\r\n    if (this.state.postLoaded) {\r\n      return (\r\n        <div className=\"card\">\r\n          <div className=\"card-body d-flex flex-column flex-sm-row\">\r\n            <div className=\"text-center mb-2 mb-sm-0\">\r\n              <img src={`https://api.adorable.io/avatars/100/${post.userId}.png`} alt={`user-${post.userId}`}/>\r\n            </div>\r\n            <div className=\"flex-grow-1 pl-0 pl-sm-3\">\r\n              <h3>{post.title}</h3>\r\n              <p>{post.body}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <img src={logo} width=\"100\" height=\"100\" className=\"app-logo\" alt=\"\"></img>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Post {this.state.id}</h2>\r\n        {this.postTpl()}\r\n        <br></br>\r\n        {this.commentsTpl()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface LinkDispatchProps {\r\n  updatePost: (post: PostType) => void;\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, AppActions>): LinkDispatchProps => ({\r\n  updatePost: bindActionCreators(updatePost, dispatch)\r\n});\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(Post);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { bindActionCreators } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { getPosts, setLimit } from '../actions/posts';\r\nimport comments from '../assets/images/comments.svg';\r\nimport logo from '../assets/images/logo.svg';\r\nimport '../scss/Posts.scss';\r\nimport { AppState } from '../store/configureStore';\r\nimport { AppActions } from '../types/actions';\r\nimport Post, { default as PostType } from '../types/Post';\r\n\r\ntype PostsProps = LinkStateProps & LinkDispatchProps;\r\n\r\nclass Posts extends Component<PostsProps> {\r\n  state = {\r\n    filteredPosts: []\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.posts.length > 0) {\r\n      this.filterPosts(this.props.limit);\r\n    } else {\r\n      this.props.getPosts().then(() => {\r\n        this.filterPosts(this.props.limit);\r\n      });\r\n    }\r\n  }\r\n\r\n  filterPosts(limit:number) {\r\n    const filteredPosts:any = [];\r\n\r\n    this.props.posts.forEach((post: Post) => {\r\n      const existingPosts = filteredPosts.filter((filteredPost: Post) => filteredPost.userId === post.userId);\r\n      if (!existingPosts || existingPosts.length < limit) {\r\n        filteredPosts.push(post);\r\n      }\r\n    })\r\n\r\n    this.setState({ filteredPosts });\r\n  }\r\n\r\n  onSelectChange(event: React.FormEvent<HTMLSelectElement>) {\r\n    const limit = parseInt(event.currentTarget.value);\r\n    this.props.setLimit(limit);\r\n    this.filterPosts(limit);\r\n  }\r\n\r\n  optionTpl() {\r\n    const options = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n\r\n    return (\r\n      options.map((option) => {\r\n        return (\r\n          <option key={option} value={option}>\r\n            {option}\r\n          </option>\r\n        )\r\n      }) \r\n    );\r\n  }\r\n\r\n  postTpl(post: Post) {\r\n    return (\r\n      <Link key={post.id} className={`post card mb-2 ${post.visited ? 'visited' : ''}`} to={`/posts/${post.id}/`}>\r\n        <div className=\"card-body d-flex flex-column flex-sm-row\">\r\n          <div className=\"text-center mb-2 mb-sm-0\">\r\n            <img className=\"rounded\" src={`https://api.adorable.io/avatars/100/${post.userId}.png`} alt={`user-${post.userId}`}/>\r\n          </div>\r\n          <div className=\"flex-grow-1 pl-0 pl-sm-3\">\r\n            <h3>{post.title}</h3>\r\n            <p>{post.body}</p>\r\n            {\r\n              post.comments !== undefined ?\r\n              <div className=\"text-danger\">\r\n                <img src={comments} alt=\"comments\" width=\"16\"/>\r\n                <span className=\"ml-1\">{post.comments} comments</span>\r\n              </div>\r\n              : <span></span>\r\n            }\r\n          </div>\r\n        </div>\r\n      </Link>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2 className=\"d-flex\">\r\n          <div className=\"flex-grow-1\">All Posts</div>\r\n          <div className=\"d-flex\">\r\n            <small className=\"text-nowrap mr-2\">Limit posts per user:</small>\r\n            <select value={this.props.limit} onChange={this.onSelectChange.bind(this)} className=\"form-control\">\r\n              { this.optionTpl() }\r\n            </select>\r\n          </div>\r\n        </h2>\r\n\r\n        <div>\r\n          { \r\n            this.state.filteredPosts.length > 0 ? this.state.filteredPosts.map(this.postTpl)\r\n            : <img src={logo} width=\"100\" height=\"100\" className=\"app-logo\" alt=\"\"></img>\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface LinkStateProps {\r\n  posts: PostType[];\r\n  limit: number;\r\n}\r\n\r\ninterface LinkDispatchProps {\r\n  getPosts: () => any;\r\n  setLimit: (limit:number) => any;\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): LinkStateProps => ({\r\n  posts: state.posts,\r\n  limit: state.limit\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, AppActions>): LinkDispatchProps => ({\r\n  getPosts: bindActionCreators(getPosts, dispatch),\r\n  setLimit: bindActionCreators(setLimit, dispatch)\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Posts);","import React from 'react';\nimport { BrowserRouter as Router, NavLink, Route } from 'react-router-dom';\nimport './App.scss';\nimport logo from './assets/images/logo.svg';\nimport Albums from './components/Albums';\nimport Post from './components/Post';\nimport Posts from './components/Posts';\n\nconst App: React.FC = () => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <nav className=\"fixed-top navbar navbar-dark bg-dark w-100\">\n            <ul className=\"navbar-nav flex-row justify-content-start container px-2\">\n              <li className=\"navbar-brand\">\n                <img src={logo} width=\"40\" height=\"40\" className=\"app-logo d-inline-block align-top\" alt=\"\"></img>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" exact={true} to=\"/\" activeClassName=\"active\">Posts</NavLink>\n              </li>\n              <li className=\"nav-item ml-3\">\n                <NavLink className=\"nav-link\" to=\"/albums/\" activeClassName=\"active\">Albums</NavLink>\n              </li>\n            </ul>\n          </nav>\n        </header>\n        <section className=\"container\">\n          <Route path=\"/\" exact component={Posts} />\n          <Route path=\"/posts/:id/\" component={Post} />\n          <Route path=\"/albums/\" component={Albums} />\n        </section>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { AlbumsActionTypes } from '../types/actions';\r\nimport Album from '../types/Album';\r\nimport Pagination from '../types/Pagination';\r\n\r\nconst defaultAlbumsState: Album[] = [];\r\nconst defaultPaginationState: Pagination = {\r\n  startPage: 1\r\n}\r\n\r\nexport function albumsPaginationReducer (state = defaultPaginationState, action: AlbumsActionTypes) {\r\n  switch (action.type) {\r\n    case 'SET_ALBUMS_PAGINATION':\r\n      return action.pagination;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport function albumsReducer (state = defaultAlbumsState, action: AlbumsActionTypes) {\r\n  switch (action.type) {\r\n    case 'SET_ALBUMS':\r\n      return action.albums;\r\n    default:\r\n      return state;\r\n  }\r\n};","import { PostsActionTypes } from '../types/actions';\r\n\r\nconst limitReducersDefaultState: number = 1;\r\n\r\nexport default (state = limitReducersDefaultState, action: PostsActionTypes): number => {\r\n  switch (action.type) {\r\n    case 'SET_LIMIT':\r\n      return action.limit;\r\n    default:\r\n      return state;\r\n  }\r\n};","import { PostsActionTypes } from '../types/actions';\r\nimport Post from '../types/Post';\r\n\r\nconst defaultState: Post[] = [];\r\n\r\nexport default (state = defaultState, action: PostsActionTypes) => {\r\n  switch (action.type) {\r\n    case 'SET_POSTS':\r\n      return action.posts;\r\n    default:\r\n      return state;\r\n  }\r\n};","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport thunk, { ThunkMiddleware } from 'redux-thunk';\r\nimport { albumsReducer, albumsPaginationReducer } from '../reducers/albums';\r\nimport limitReducer from '../reducers/postsLimit';\r\nimport postsReducer from '../reducers/posts';\r\nimport { AppActions } from '../types/actions';\r\n\r\nexport const rootReducer = combineReducers({\r\n  posts: postsReducer,\r\n  limit: limitReducer,\r\n  albums: albumsReducer,\r\n  albumsPagination: albumsPaginationReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunk as ThunkMiddleware<AppState, AppActions>)\r\n);\r\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'react-responsive-carousel/lib/styles/carousel.min.css';\nimport App from './App';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/configureStore';\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}